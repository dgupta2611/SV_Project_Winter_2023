package definitions;

//-----------------------------------------------------------------
// Key Params
//-----------------------------------------------------------------

	// Special Purpose Address Bits
	parameter AUTO_PRECHARGE_BIT     = 10;
	parameter ALL_BANKS_BIT          = 10;

	// Widths	
	parameter SDRAM_ADDR_W           = 24;
	parameter SDRAM_DATA_W           = 16;
 	parameter SDRAM_BANK_W           = 2;
 	parameter SDRAM_COL_W            = 9;
 	parameter SDRAM_ROW_W            = SDRAM_ADDR_W - SDRAM_COL_W - SDRAM_BANK_W; // 13
 	parameter SDRAM_DQM_W            = 2;
 	
	parameter SDRAM_BANKS            = 2 ** SDRAM_BANK_W;	

	// SDRAM timing
	parameter SDRAM_MHZ              = 50;
	parameter CYCLE_TIME_NS          = 1000 / SDRAM_MHZ;  //20
	parameter SDRAM_READ_LATENCY     = 2;	
	parameter SDRAM_TRCD_CYCLES 	 = (20 + (CYCLE_TIME_NS-1)) / CYCLE_TIME_NS;  //1
	parameter SDRAM_TRP_CYCLES  	 = (20 + (CYCLE_TIME_NS-1)) / CYCLE_TIME_NS;  //1
	parameter SDRAM_TRFC_CYCLES 	 = (60 + (CYCLE_TIME_NS-1)) / CYCLE_TIME_NS;  //3
	parameter SDRAM_START_DELAY      = 100000 / (1000 / SDRAM_MHZ);                // 5000 := 100uS
	parameter SDRAM_REFRESH_CYCLES   = ((64000*SDRAM_MHZ) / (2 ** SDRAM_ROW_W))-1;  //389

	class data_rand #(parameter DAT_WID = 16);
		
		rand bit [DAT_WID-1:0] data;

		// constraint dat_constr_upper_half { data[DAT_WID-1:DAT_WID/2] > 0;       data[DAT_WID-1:DAT_WID/2] < 255; }
		// constraint dat_constr_lower_half { data[DAT_WID/2-1:0]       > 0;       data[DAT_WID/2-1:0]       < 255; }	
		
	endclass

	class addr_rand #(parameter ADR_WID = 32);
		
		rand bit [31:0] addr;

		int col[8] = '{255, 0, 35, 77, 155, 213, 199, 222};
		int row[4] = '{666, 1024, 5, 5050};

		constraint adr_constr_LSB { addr[0] == 0; }
		constraint adr_constr_BYS { addr[1] == 0; }

		// Constraining total number of columns to 8
		constraint adr_constr_COL { addr[SDRAM_COL_W:2] inside {col}; }	

		// Bank 0: 40%; Bank 1: 20%; Bank 2: 20%; Bank 3: 20%; 
		constraint adr_constr_BNK { addr[SDRAM_COL_W+2:SDRAM_COL_W+2-1] dist {0:/40, [1:3]:/60}; }

		// Constraining total number of rows to 4 
		constraint adr_constr_ROW { addr[SDRAM_ADDR_W:SDRAM_COL_W+2+1] inside {row}; }

		// MSBs
		constraint adr_constr_TAG { addr[31:SDRAM_ADDR_W+1] == 0; }

	endclass 

	class wrBytes;
		rand bit [3:0] mask;
		constraint c1 {mask dist {15:/70, [1:14]:/30};}
		constraint c2 {mask > 0;}

	endclass

	class ops_rand #(parameter wrPercent = 50);
		rand bit issueWr;
		constraint c {issueWr dist {1:/wrPercent, 0:/(100-wrPercent)}; }
	endclass


	class delay_rand;
		rand int delay;

		// More weightage for 0 delay between ops
		int values [5] = '{0, 10, 0, 100, 25};

		constraint c {delay inside {values};} 
	endclass

	class ref_mem;
		logic [31:0] M     [logic [22:0]];
		logic [3:0]  Mask  [logic [22:0]];

		function void write(logic [22:0] addr, logic [31:0] data, logic [3:0] wrMask);
			M[addr]    = data;
			Mask[addr] = wrMask;
		endfunction

		function logic [35:0] read(logic [22:0] addr);
			read = {Mask[addr], M[addr]};
		endfunction

	endclass 
endpackage